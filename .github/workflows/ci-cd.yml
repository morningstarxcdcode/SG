name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Linting and Code Quality
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install root dependencies
        run: |
          npm ci
          npm run install-server
          npm run install-mobile

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 💅 Check Prettier formatting
        run: npm run format -- --check

      - name: 📊 Upload lint results
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JSON: true

  # Backend Testing
  test-backend:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          npm ci
          npm run install-server

      - name: 🧪 Run backend tests
        run: |
          cd server
          npm test
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: backend

  # Mobile App Testing
  test-mobile:
    name: 📱 Mobile App Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          npm ci
          npm run install-mobile

      - name: 🧪 Run mobile tests
        run: |
          cd mobile
          npm test -- --coverage --watchAll=false

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile/coverage/lcov.info
          flags: mobile

  # Security Vulnerability Scan
  security-scan:
    name: 🔐 Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [test-backend, test-mobile]

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Run npm audit (Root)
        run: |
          npm audit --audit-level moderate || true
          npm audit --json > audit-root.json || true

      - name: 🔍 Run npm audit (Server)
        run: |
          cd server
          npm audit --audit-level moderate || true
          npm audit --json > audit-server.json || true

      - name: 🔍 Run npm audit (Mobile)
        run: |
          cd mobile
          npm audit --audit-level moderate || true
          npm audit --json > audit-mobile.json || true

      - name: 🛡️ Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-results
          path: |
            audit-*.json
            server/audit-*.json
            mobile/audit-*.json

  # Build and Docker
  build:
    name: 🏗️ Build & Docker
    runs-on: ubuntu-latest
    needs: [test-backend, test-mobile, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/secureguardian
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance Testing
  performance-test:
    name: 🚀 Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Install dependencies
        run: |
          npm ci
          npm run install-server

      - name: 🚀 Start server for testing
        run: |
          cd server
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3000

      - name: 🔥 Run Artillery load tests
        run: |
          npm install -g artillery
          artillery quick --count 10 --num 5 http://localhost:3000

  # Deployment
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🚀 Deploy to production
        run: |
          echo "🎉 Deploying SecureGuardian to production..."
          echo "🔧 This step would typically deploy to your cloud provider"
          echo "📱 Mobile app would be built and submitted to app stores"
          echo "🖥️ Server would be deployed to your hosting platform"

  # Notification
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: 📢 Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#secureguardian'
          message: |
            🚀 SecureGuardian Deployment Status: ${{ job.status }}
            📝 Commit: ${{ github.sha }}
            👤 Author: ${{ github.actor }}
            🌐 Environment: Production
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
